<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

<!-- 	Advice 등록 -->
	<bean id="profilingAdvice" class="kr.or.ddit.aop.ProfilingAdvice"/>
	
<!-- 	aop  -->
<!-- 	<aop:config> -->
<!-- 		 어떤 메서드를 expression="" -->
<!-- 		<aop:pointcut expression="execution(* kr.or.ddit..service.*.*(..))" id="target"/> -->
<!--  		ref= "어떤 advice를 사용할지"	  -->
<!-- 		<aop:aspect ref="profilingAdvice"> -->
<!-- 			<aop:before method="beforMethod" pointcut-ref="target"/> -->
<!-- 			<aop:around method="aroundMethod" pointcut-ref="target"/> -->
<!-- 		</aop:aspect> -->
<!-- 	</aop:config> -->

<!-- @Aspect를 부여한 클래스에 대한 처리 -->
	<aop:aspectj-autoproxy/>

<!-- 	@ControllerAdvice 어노테이션 처리로 대체	-->
	<context:component-scan base-package="kr.or.ddit" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect"/>
	</context:component-scan>



</beans>
